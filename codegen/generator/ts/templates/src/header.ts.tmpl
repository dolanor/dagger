{{ define "header" }}
import { GraphQLClient, gql } from "../index.js";
import { 
  ContainerExecArgs, 
  ContainerWithFsArgs, 
  ContainerWithMountedDirectoryArgs, 
  ContainerWithWorkdirArgs, 
  DirectoryEntriesArgs, 
  DirectoryFileArgs, 
  GitRepositoryBranchArgs, 
  HostWorkdirArgs, 
  QueryContainerArgs, 
  QueryGitArgs, 
  Scalars } from "./types.js";
import { queryBuilder, queryFlatten } from "./utils.js"

export type QueryTree = {
  operation: string
  args?: Record<string, any>
}

class BaseClient {
  protected _queryTree:  QueryTree[]
  

  constructor(queryTree: QueryTree[] = []) {
    this._queryTree = queryTree
  }

  get queryTree() {
    return this._queryTree;
  }

  protected async _compute() : Promise<Record<string, any>> {
    // run the query and return the result.
    const query = queryBuilder(this._queryTree)

    const graphqlClient = new GraphQLClient("http://localhost:8080/query")

    const computeQuery: Promise<Record<string, string>> = new Promise(async (resolve) => {
      const response: Awaited<Promise<Record<string, any>>> = await graphqlClient.request(gql`${query}`)

      resolve(queryFlatten(response));
    })

    const result = await computeQuery;

    return result
  }
}

{{ end }}
