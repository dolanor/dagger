{{ define "field" }}
	{{- if Solve . }}async {{end}}
	{{- .Name -}}
	(
		{{- if .Args -}}
			{{- template "input_args" . -}}
		{{- end -}}
	)
	{{- if Solve . -}}
		{{- with .TypeRef }}
			{{- template "return_solve" . -}}
		{{- end -}}
		{{- "" }} {
    this._queryTree = [
      ...this._queryTree,
      {
      operation: '{{ .Name }}'
		{{- if .Args }},
      args
		{{- end }}
      }
    ]
	{{- if .TypeRef }}

    const response: new Promise<Record<string, Scalars('{{ .TypeRef | FormatOutputType }}')>> = await this._compute()

    return response
  }
	{{- end }}
	{{- else -}}
		{{- with .TypeRef }}
			{{- template "return" . -}}
		{{- end -}}
		{{- "" }} {
    this._queryTree = [
      ...this._queryTree,
      {
      operation: '{{ .Name }}',
      args
      }
    ]
	{{- if .TypeRef }}

    return new {{ .TypeRef | FormatOutputType }}(this._queryTree)
	{{- end }}
  }
	{{- end -}}
{{ end }}
