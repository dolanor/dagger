{{ define "field" }}
	{{- $commentLines := CommentToLines .Description }}
	{{- /* we split the comment string into a string slice of one line per element */ -}}

	{{- if .Description -}}
		{{- template "field_comment" $commentLines }}
	{{- end }}
{{ "" }}
	{{- if Solve . -}}
		{{- "" }}  async {{ "" -}}
	{{- else -}}
		{{- "" }}  {{ "" -}}
	{{- end }}
	{{- "" }}{{ .Name -}}
	(
		{{- if .Args -}}
			{{- template "input_args" . -}}
		{{- end -}}
	)
	{{- if Solve . -}}
		{{- with .TypeRef }}
			{{- template "return_solve" . -}}
		{{- end -}}
		{{- "" }} {
		{{- if .TypeRef }}
    this._queryTree = [
      ...this._queryTree,
      {
      operation: '{{ .Name }}'
		{{- if .Args }},
      args
		{{- end }}
      }
    ]

    const response: Awaited<Record<string, {{ .TypeRef | FormatOutputType }}>> = await this._compute()

    return response
  }
		{{- end }}
	{{- else -}}
		{{- with .TypeRef }}
			{{- template "return" . -}}
		{{- end -}}
		{{- "" }} {
		{{- if .TypeRef }}
    return new {{ .TypeRef | FormatOutputType }}({queryTree: [
      ...this._queryTree,
      {
      operation: '{{ .Name}}'
			{{- if .Args }},
      args
			{{- end }}
      }
    ], port: this.port})
		{{- end }}
  }
	{{- end -}}
{{ end }}
